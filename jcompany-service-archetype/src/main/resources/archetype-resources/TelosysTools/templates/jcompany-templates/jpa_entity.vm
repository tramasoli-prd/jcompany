##----------------------------------------------------------------------------------------------------
## JPA beans suffix
#set ( $env.entityClassNameSuffix = "Entity" )
##--------------------------------------------------------------------------------------------------------
## Data fields = fields not in Primary Key and not in selected Links    
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
## Link fields = fields not in Primary Key and used as FK in selected Links    
#set( $linkFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
#set( $allMappedFields = $fn.concatLists($entity.keyAttributes, $dataFields) )
##--------------------------------------------------------------------------------------------------------
##--- @Transient usage count ( number of xxxToMany links ) 
#set ( $TRANSIENT_COUNT = 0 )
#foreach( $link in $entity.selectedLinks )
#if ( $link.isCardinalityManyToMany() || $link.isCardinalityOneToMany() )
#set ( $TRANSIENT_COUNT = $TRANSIENT_COUNT + 1 )
#end
#end

package ${target.javaPackageFromFolder($SRC)};

import com.powerlogic.jcompany.core.model.entity.PlcLogicalExclusion;
import com.powerlogic.jcompany.core.model.entity.PlcVersionedEntity;


#foreach( $import in $java.imports($entity) )
import $import;
#end

#foreach( $import in $jpa.imports($entity) )
import $import;
#end

import javax.validation.constraints.*;
import javax.xml.bind.annotation.*;

/**
 * Persistent class for entity stored in table "${entity.databaseTable}"
 *
 * @author jCompany Generator
 *
 */

$jpa.entityAnnotations(0, $entity)
@SequenceGenerator(name = "SE_${entity.databaseTable}", sequenceName = "SE_${entity.databaseTable}")
@Access(AccessType.FIELD)
@XmlRootElement
@XmlAccessorType(XmlAccessType.FIELD)
// Define named queries here
@NamedQueries ( {
    @NamedQuery(name = "${entity.name}.find", query = "SELECT o FROM ${entity.name} o"),
} )
public class ${entity.name} extends PlcVersionedEntity<Long> implements PlcLogicalExclusion {

    private static final long serialVersionUID = 1L;

	/**
	 *  Construtor Default
	 */
	public ${entity.name}() {}
	
	/** Construtor
	 * 
	 * @param id
	 */
	public ${entity.name}(Long id) {
		this.id = id;
	}
	

#foreach( $field in $entity.keyAttributes )
$jpa.fieldAnnotations(4, $field)
$beanValidation.annotations(4, $field)
    @GeneratedValue(strategy=GenerationType.AUTO, generator = "SE_${entity.databaseTable}")
    private $field.formattedType(10) $field.formattedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;
#end

  
#foreach( $field in $dataFields )
## #if ( $field.isUsedInLinkJoinColumn( $entity.selectedLinks ) != true )
## $field.jpaAnnotations(4)
##     private $field.formattedType(10) $field.formattedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;
##     
## #else
##     // "$field.name" (column "$field.databaseName") is not mapped as an attribute because it is used in a link   
##     
## #end
$jpa.fieldAnnotations(4, $field)
$beanValidation.annotations(4, $field)
    private $field.formattedType(10) $field.formattedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;

#end
#foreach( $field in $linkFields )
	// "$field.name" (column "$field.databaseName") is not defined by itself because used as FK in a link 
#end


## #foreach( $link in $entity.links )
#foreach( $link in $entity.selectedLinks )
$jpa.linkAnnotations(4, $link, $allMappedFields)
    private ${link.formattedFieldType(0)} $link.formattedFieldName(12);

#end

    
#if ( $entity.hasCompositePrimaryKey() )
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE COMPOSITE KEY 
    //----------------------------------------------------------------------
##	public ${entity.name}Key getKey() {
##        return key;
##    }
## 
##    public void setKey(${entity.name}Key key) {
##        this.key = key;
##    }
##
#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name ) {
        this.compositePrimaryKey.${field.setter}( $field.name ) ;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}() {
        return this.compositePrimaryKey.${field.getter}() ;
    }
#end
#end

#else 

#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name ) {
        this.$field.name = $field.name ;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}() {
        return this.$field.name;
    }
#end
#end
#end


#foreach( $field in $dataFields )
## #if ( $field.isUsedInLinkJoinColumn( $entity.selectedLinks ) != true )
#if ( $field.databaseName )    //--- DATABASE MAPPING : $field.databaseName ( $field.databaseType ) 
#end
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name ) {
        this.$field.name = $field.name;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}() {
        return this.$field.name;
    }
#end

## #end  
#end  


## #foreach( $link in $entity.links )
#foreach( $link in $entity.selectedLinks )
#if ( $link.setter )    public void ${link.setter}( ${link.formattedFieldType(0)} ${link.formattedFieldName(0)} ) {
        this.${link.formattedFieldName(0)} = ${link.formattedFieldName(0)};
    }
#end
#if ( $link.getter )    public ${link.formattedFieldType(0)} ${link.getter}() {
        return this.${link.formattedFieldName(0)};
    }
#end

#end  


$java.toStringMethod($entity, $dataFields, "compositePrimaryKey", 4)
}
